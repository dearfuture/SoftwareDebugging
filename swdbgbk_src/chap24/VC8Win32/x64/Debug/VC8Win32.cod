; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?hInst@@3PEAUHINSTANCE__@@EA			; hInst
PUBLIC	?szTitle@@3PA_WA				; szTitle
PUBLIC	?szWindowClass@@3PA_WA				; szWindowClass
_BSS	SEGMENT
?hInst@@3PEAUHINSTANCE__@@EA DQ 01H DUP (?)		; hInst
?szTitle@@3PA_WA DW 064H DUP (?)			; szTitle
?szWindowClass@@3PA_WA DW 064H DUP (?)			; szWindowClass
_BSS	ENDS
CONST	SEGMENT
$SG26862 DB	'C', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'H', 00H, ' ', 00H
	DB	'C', 00H, 'a', 00H, 'u', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' '
	DB	00H, '%', 00H, 'd', 00H, '/', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG26863 DB	'A', 00H, 'd', 00H, 'v', 00H, 'D', 00H, 'b', 00H, 'g', 00H
	DB	'-', 00H, 'V', 00H, 'C', 00H, '8', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, '3', 00H, '2', 00H, 00H, 00H
$SG26870 DB	'I', 00H, ' ', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'o', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'w'
	DB	00H, ' ', 00H, '2', 00H, ' ', 00H, 'b', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG26871 DB	'A', 00H, 'd', 00H, 'v', 00H, 'D', 00H, 'b', 00H, 'g', 00H
	DB	'-', 00H, 'V', 00H, 'C', 00H, '8', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, '3', 00H, '2', 00H, 00H, 00H
$SG26873 DB	'C', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'H', 00H, ' ', 00H
	DB	'C', 00H, 'a', 00H, 'u', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' '
	DB	00H, '%', 00H, 'd', 00H, '/', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG26874 DB	'A', 00H, 'd', 00H, 'v', 00H, 'D', 00H, 'b', 00H, 'g', 00H
	DB	'-', 00H, 'V', 00H, 'C', 00H, '8', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, '3', 00H, '2', 00H, 00H, 00H
$SG26881 DB	'I', 00H, ' ', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'o', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'w'
	DB	00H, ' ', 00H, '1', 00H, '6', 00H, ' ', 00H, 'b', 00H, 'y', 00H
	DB	't', 00H, 'e', 00H, 's', 00H, '.', 00H, '.', 00H, '.', 00H, 00H
	DB	00H
	ORG $+4
$SG26882 DB	'A', 00H, 'd', 00H, 'v', 00H, 'D', 00H, 'b', 00H, 'g', 00H
	DB	'-', 00H, 'V', 00H, 'C', 00H, '8', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, '3', 00H, '2', 00H, 00H, 00H
$SG26884 DB	'C', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'H', 00H, ' ', 00H
	DB	'C', 00H, 'a', 00H, 'u', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' '
	DB	00H, '%', 00H, 'd', 00H, '/', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG26885 DB	'A', 00H, 'd', 00H, 'v', 00H, 'D', 00H, 'b', 00H, 'g', 00H
	DB	'-', 00H, 'V', 00H, 'C', 00H, '8', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, '3', 00H, '2', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?InitInstance@@YAHPEAUHINSTANCE__@@H@Z		; InitInstance
PUBLIC	?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z	; MyRegisterClass
PUBLIC	wWinMain
EXTRN	__imp_DispatchMessageW:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_TranslateAcceleratorW:PROC
EXTRN	__imp_GetMessageW:PROC
EXTRN	__imp_LoadAcceleratorsW:PROC
EXTRN	__imp_LoadStringW:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_RTC_InitBase:PROC
pdata	SEGMENT
$pdata$wWinMain DD imagerel $LN7
	DD	imagerel $LN7+285
	DD	imagerel $unwind$wWinMain
pdata	ENDS
xdata	SEGMENT
$unwind$wWinMain DD 023501H
	DD	07015d219H
xdata	ENDS
CONST	SEGMENT
wWinMain$rtcName$0 DB 06dH
	DB	073H
	DB	067H
	DB	00H
	ORG $+4
wWinMain$rtcVarDesc DD 028H
	DD	030H
	DQ	FLAT:wWinMain$rtcName$0
	ORG $+48
wWinMain$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:wWinMain$rtcVarDesc
CONST	ENDS
;	COMDAT rtc$TMZ
; File c:\dig\dbg\author\code\chap24\vc8win32\vc8win32.cpp
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
msg$ = 40
hAccelTable$ = 104
hInstance$ = 128
hPrevInstance$ = 136
lpCmdLine$ = 144
nCmdShow$ = 152
wWinMain PROC

; 25   : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	48 b9 1c 00 00
	00 00 00 00 00	 mov	 rcx, 28
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]

; 26   : 	UNREFERENCED_PARAMETER(hPrevInstance);
; 27   : 	UNREFERENCED_PARAMETER(lpCmdLine);
; 28   : 
; 29   :  	// TODO: Place code here.
; 30   : 	MSG msg;
; 31   : 	HACCEL hAccelTable;
; 32   : 
; 33   : 	// Initialize global strings
; 34   : 	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);

  00035	41 b9 64 00 00
	00		 mov	 r9d, 100		; 00000064H
  0003b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?szTitle@@3PA_WA ; szTitle
  00042	ba 67 00 00 00	 mov	 edx, 103		; 00000067H
  00047	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR hInstance$[rsp]
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadStringW

; 35   : 	LoadString(hInstance, IDC_VC8WIN32, szWindowClass, MAX_LOADSTRING);

  00055	41 b9 64 00 00
	00		 mov	 r9d, 100		; 00000064H
  0005b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?szWindowClass@@3PA_WA ; szWindowClass
  00062	ba 6d 00 00 00	 mov	 edx, 109		; 0000006dH
  00067	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR hInstance$[rsp]
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadStringW

; 36   : 	MyRegisterClass(hInstance);

  00075	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR hInstance$[rsp]
  0007d	e8 00 00 00 00	 call	 ?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z ; MyRegisterClass

; 37   : 
; 38   : 	// Perform application initialization:
; 39   : 	if (!InitInstance (hInstance, nCmdShow))

  00082	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR nCmdShow$[rsp]
  00089	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR hInstance$[rsp]
  00091	e8 00 00 00 00	 call	 ?InitInstance@@YAHPEAUHINSTANCE__@@H@Z ; InitInstance
  00096	85 c0		 test	 eax, eax
  00098	75 04		 jne	 SHORT $LN4@wWinMain

; 40   : 	{
; 41   : 		return FALSE;

  0009a	33 c0		 xor	 eax, eax
  0009c	eb 64		 jmp	 SHORT $LN5@wWinMain
$LN4@wWinMain:

; 42   : 	}
; 43   : 
; 44   : 	hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_VC8WIN32));

  0009e	ba 6d 00 00 00	 mov	 edx, 109		; 0000006dH
  000a3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR hInstance$[rsp]
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadAcceleratorsW
  000b1	48 89 44 24 68	 mov	 QWORD PTR hAccelTable$[rsp], rax
$LN3@wWinMain:

; 45   : 
; 46   : 	// Main message loop:
; 47   : 	while (GetMessage(&msg, NULL, 0, 0))

  000b6	45 33 c9	 xor	 r9d, r9d
  000b9	45 33 c0	 xor	 r8d, r8d
  000bc	33 d2		 xor	 edx, edx
  000be	48 8d 4c 24 28	 lea	 rcx, QWORD PTR msg$[rsp]
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetMessageW
  000c9	85 c0		 test	 eax, eax
  000cb	74 31		 je	 SHORT $LN2@wWinMain

; 48   : 	{
; 49   : 		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))

  000cd	4c 8d 44 24 28	 lea	 r8, QWORD PTR msg$[rsp]
  000d2	48 8b 54 24 68	 mov	 rdx, QWORD PTR hAccelTable$[rsp]
  000d7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR msg$[rsp]
  000dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateAcceleratorW
  000e2	85 c0		 test	 eax, eax
  000e4	75 16		 jne	 SHORT $LN1@wWinMain

; 50   : 		{
; 51   : 			TranslateMessage(&msg);

  000e6	48 8d 4c 24 28	 lea	 rcx, QWORD PTR msg$[rsp]
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 52   : 			DispatchMessage(&msg);

  000f1	48 8d 4c 24 28	 lea	 rcx, QWORD PTR msg$[rsp]
  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageW
$LN1@wWinMain:

; 53   : 		}
; 54   : 	}

  000fc	eb b8		 jmp	 SHORT $LN3@wWinMain
$LN2@wWinMain:

; 55   : 
; 56   : 	return (int) msg.wParam;

  000fe	8b 44 24 38	 mov	 eax, DWORD PTR msg$[rsp+16]
$LN5@wWinMain:

; 57   : }

  00102	48 8b f8	 mov	 rdi, rax
  00105	48 8b cc	 mov	 rcx, rsp
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:wWinMain$rtcFrameData
  0010f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00114	48 8b c7	 mov	 rax, rdi
  00117	48 83 c4 70	 add	 rsp, 112		; 00000070H
  0011b	5f		 pop	 rdi
  0011c	c3		 ret	 0
wWinMain ENDP
_TEXT	ENDS
PUBLIC	?WndProc@@YA_JPEAUHWND__@@I_K_J@Z		; WndProc
EXTRN	__imp_RegisterClassExW:PROC
EXTRN	__imp_LoadCursorW:PROC
EXTRN	__imp_LoadIconW:PROC
pdata	SEGMENT
$pdata$?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z DD imagerel $LN3
	DD	imagerel $LN3+232
	DD	imagerel $unwind$?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z DD 032901H
	DD	012010dH
	DD	07006H
xdata	ENDS
CONST	SEGMENT
?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z$rtcName$0 DB 077H ; MyRegisterClass
	DB	063H
	DB	065H
	DB	078H
	DB	00H
	ORG $+11
?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z$rtcVarDesc DD 030H ; MyRegisterClass
	DD	050H
	DQ	FLAT:?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z$rtcName$0
	ORG $+48
?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z$rtcFrameData DD 01H ; MyRegisterClass
	DD	00H
	DQ	FLAT:?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z$rtcVarDesc
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
_TEXT	SEGMENT
wcex$ = 48
hInstance$ = 160
?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z PROC		; MyRegisterClass

; 75   : {

$LN3:
  00130	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00135	57		 push	 rdi
  00136	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0013d	48 8b fc	 mov	 rdi, rsp
  00140	48 b9 24 00 00
	00 00 00 00 00	 mov	 rcx, 36			; 00000024H
  0014a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0014f	f3 ab		 rep stosd
  00151	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]

; 76   : 	WNDCLASSEX wcex;
; 77   : 
; 78   : 	wcex.cbSize = sizeof(WNDCLASSEX);

  00159	c7 44 24 30 50
	00 00 00	 mov	 DWORD PTR wcex$[rsp], 80 ; 00000050H

; 79   : 
; 80   : 	wcex.style			= CS_HREDRAW | CS_VREDRAW;

  00161	c7 44 24 34 03
	00 00 00	 mov	 DWORD PTR wcex$[rsp+4], 3

; 81   : 	wcex.lpfnWndProc	= WndProc;

  00169	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?WndProc@@YA_JPEAUHWND__@@I_K_J@Z ; WndProc
  00170	48 89 44 24 38	 mov	 QWORD PTR wcex$[rsp+8], rax

; 82   : 	wcex.cbClsExtra		= 0;

  00175	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR wcex$[rsp+16], 0

; 83   : 	wcex.cbWndExtra		= 0;

  0017d	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR wcex$[rsp+20], 0

; 84   : 	wcex.hInstance		= hInstance;

  00185	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR hInstance$[rsp]
  0018d	48 89 44 24 48	 mov	 QWORD PTR wcex$[rsp+24], rax

; 85   : 	wcex.hIcon			= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_VC8WIN32));

  00192	ba 6b 00 00 00	 mov	 edx, 107		; 0000006bH
  00197	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR hInstance$[rsp]
  0019f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadIconW
  001a5	48 89 44 24 50	 mov	 QWORD PTR wcex$[rsp+32], rax

; 86   : 	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);

  001aa	ba 00 7f 00 00	 mov	 edx, 32512		; 00007f00H
  001af	33 c9		 xor	 ecx, ecx
  001b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadCursorW
  001b7	48 89 44 24 58	 mov	 QWORD PTR wcex$[rsp+40], rax

; 87   : 	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);

  001bc	48 c7 44 24 60
	06 00 00 00	 mov	 QWORD PTR wcex$[rsp+48], 6

; 88   : 	wcex.lpszMenuName	= MAKEINTRESOURCE(IDC_VC8WIN32);

  001c5	48 c7 44 24 68
	6d 00 00 00	 mov	 QWORD PTR wcex$[rsp+56], 109 ; 0000006dH

; 89   : 	wcex.lpszClassName	= szWindowClass;

  001ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?szWindowClass@@3PA_WA ; szWindowClass
  001d5	48 89 44 24 70	 mov	 QWORD PTR wcex$[rsp+64], rax

; 90   : 	wcex.hIconSm		= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

  001da	ba 6c 00 00 00	 mov	 edx, 108		; 0000006cH
  001df	48 8b 4c 24 48	 mov	 rcx, QWORD PTR wcex$[rsp+24]
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadIconW
  001ea	48 89 44 24 78	 mov	 QWORD PTR wcex$[rsp+72], rax

; 91   : 
; 92   : 	return RegisterClassEx(&wcex);

  001ef	48 8d 4c 24 30	 lea	 rcx, QWORD PTR wcex$[rsp]
  001f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassExW

; 93   : }

  001fa	48 8b f8	 mov	 rdi, rax
  001fd	48 8b cc	 mov	 rcx, rsp
  00200	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z$rtcFrameData
  00207	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0020c	48 8b c7	 mov	 rax, rdi
  0020f	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00216	5f		 pop	 rdi
  00217	c3		 ret	 0
?MyRegisterClass@@YAGPEAUHINSTANCE__@@@Z ENDP		; MyRegisterClass
_TEXT	ENDS
EXTRN	__imp_UpdateWindow:PROC
EXTRN	__imp_ShowWindow:PROC
EXTRN	__imp_CreateWindowExW:PROC
pdata	SEGMENT
$pdata$?InitInstance@@YAHPEAUHINSTANCE__@@H@Z DD imagerel $LN4
	DD	imagerel $LN4+214
	DD	imagerel $unwind$?InitInstance@@YAHPEAUHINSTANCE__@@H@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?InitInstance@@YAHPEAUHINSTANCE__@@H@Z DD 022a01H
	DD	0700ad20eH
; Function compile flags: /Odtp /RTCsu
xdata	ENDS
_TEXT	SEGMENT
hWnd$ = 96
hInstance$ = 128
nCmdShow$ = 136
?InitInstance@@YAHPEAUHINSTANCE__@@H@Z PROC		; InitInstance

; 106  : {

$LN4:
  00220	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00224	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00229	57		 push	 rdi
  0022a	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0022e	48 8b fc	 mov	 rdi, rsp
  00231	48 b9 1c 00 00
	00 00 00 00 00	 mov	 rcx, 28
  0023b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00240	f3 ab		 rep stosd
  00242	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]

; 107  :    HWND hWnd;
; 108  : 
; 109  :    hInst = hInstance; // Store instance handle in our global variable

  0024a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR hInstance$[rsp]
  00252	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?hInst@@3PEAUHINSTANCE__@@EA, rax ; hInst

; 110  : 
; 111  :    hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
; 112  :       CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

  00259	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  00262	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR hInstance$[rsp]
  0026a	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0026f	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  00278	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  00281	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00289	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  00291	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00299	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  002a1	41 b9 00 00 cf
	00		 mov	 r9d, 13565952		; 00cf0000H
  002a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?szTitle@@3PA_WA ; szTitle
  002ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?szWindowClass@@3PA_WA ; szWindowClass
  002b5	33 c9		 xor	 ecx, ecx
  002b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExW
  002bd	48 89 44 24 60	 mov	 QWORD PTR hWnd$[rsp], rax

; 113  : 
; 114  :    if (!hWnd)

  002c2	48 83 7c 24 60
	00		 cmp	 QWORD PTR hWnd$[rsp], 0
  002c8	75 04		 jne	 SHORT $LN1@InitInstan

; 115  :    {
; 116  :       return FALSE;

  002ca	33 c0		 xor	 eax, eax
  002cc	eb 22		 jmp	 SHORT $LN2@InitInstan
$LN1@InitInstan:

; 117  :    }
; 118  : 
; 119  :    ShowWindow(hWnd, nCmdShow);

  002ce	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR nCmdShow$[rsp]
  002d5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR hWnd$[rsp]
  002da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ShowWindow

; 120  :    UpdateWindow(hWnd);

  002e0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR hWnd$[rsp]
  002e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_UpdateWindow

; 121  : 
; 122  :    return TRUE;

  002eb	b8 01 00 00 00	 mov	 eax, 1
$LN2@InitInstan:

; 123  : }

  002f0	48 83 c4 70	 add	 rsp, 112		; 00000070H
  002f4	5f		 pop	 rdi
  002f5	c3		 ret	 0
?InitInstance@@YAHPEAUHINSTANCE__@@H@Z ENDP		; InitInstance
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?TestTry@@YAHPEAUHWND__@@H@Z			; TestTry
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__imp_MessageBoxW:PROC
EXTRN	__imp__swprintf:PROC
EXTRN	__security_cookie:QWORD
EXTRN	__security_check_cookie:PROC
pdata	SEGMENT
$pdata$?TestTry@@YAHPEAUHWND__@@H@Z DD imagerel $LN9
	DD	imagerel $LN9+140
	DD	imagerel $unwind$?TestTry@@YAHPEAUHWND__@@H@Z
$pdata$?catch$0@?0??TestTry@@YAHPEAUHWND__@@H@Z@4HA DD imagerel ?catch$0@?0??TestTry@@YAHPEAUHWND__@@H@Z@4HA
	DD	imagerel ?catch$0@?0??TestTry@@YAHPEAUHWND__@@H@Z@4HA+92
	DD	imagerel $unwind$?catch$0@?0??TestTry@@YAHPEAUHWND__@@H@Z@4HA
pdata	ENDS
xdata	SEGMENT
$stateUnwindMap$?TestTry@@YAHPEAUHWND__@@H@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$handlerMap$0$?TestTry@@YAHPEAUHWND__@@H@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??TestTry@@YAHPEAUHWND__@@H@Z@4HA
	DD	048H
$tryMap$?TestTry@@YAHPEAUHWND__@@H@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?TestTry@@YAHPEAUHWND__@@H@Z
$unwind$?TestTry@@YAHPEAUHWND__@@H@Z DD 024519H
	DD	0700af211H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?TestTry@@YAHPEAUHWND__@@H@Z
	DD	07bH
$unwind$?catch$0@?0??TestTry@@YAHPEAUHWND__@@H@Z@4HA DD 031019H
	DD	0700c4210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?TestTry@@YAHPEAUHWND__@@H@Z
$ip2state$?TestTry@@YAHPEAUHWND__@@H@Z DD imagerel ?TestTry@@YAHPEAUHWND__@@H@Z
	DD	0ffffffffH
	DD	imagerel ?TestTry@@YAHPEAUHWND__@@H@Z+77
	DD	00H
	DD	imagerel ?TestTry@@YAHPEAUHWND__@@H@Z+93
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??TestTry@@YAHPEAUHWND__@@H@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??TestTry@@YAHPEAUHWND__@@H@Z@4HA+19
	DD	01H
	DD	imagerel ?catch$0@?0??TestTry@@YAHPEAUHWND__@@H@Z@4HA+75
	DD	00H
xdata	ENDS
CONST	SEGMENT
?TestTry@@YAHPEAUHWND__@@H@Z$rtcName$0 DB 073H		; TestTry
	DB	07aH
	DB	04dH
	DB	073H
	DB	067H
	DB	00H
	ORG $+10
?TestTry@@YAHPEAUHWND__@@H@Z$rtcVarDesc DD 038H		; TestTry
	DD	01eH
	DQ	FLAT:?TestTry@@YAHPEAUHWND__@@H@Z$rtcName$0
	ORG $+48
?TestTry@@YAHPEAUHWND__@@H@Z$rtcFrameData DD 01H	; TestTry
	DD	00H
	DQ	FLAT:?TestTry@@YAHPEAUHWND__@@H@Z$rtcVarDesc
$cppxdata$?TestTry@@YAHPEAUHWND__@@H@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?TestTry@@YAHPEAUHWND__@@H@Z
	DD	01H
	DD	imagerel $tryMap$?TestTry@@YAHPEAUHWND__@@H@Z
	DD	06H
	DD	imagerel $ip2state$?TestTry@@YAHPEAUHWND__@@H@Z
	DD	070H
	DD	00H
	DD	00H
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
_TEXT	SEGMENT
m$ = 32
szMsg$ = 56
$T27002 = 112
__$ArrayPad$ = 120
hWnd$ = 144
n$ = 152
?TestTry@@YAHPEAUHWND__@@H@Z PROC			; TestTry

; 125  : {

$LN9:
  00300	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00304	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00309	57		 push	 rdi
  0030a	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00311	48 8b fc	 mov	 rdi, rsp
  00314	48 b9 20 00 00
	00 00 00 00 00	 mov	 rcx, 32			; 00000020H
  0031e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00323	f3 ab		 rep stosd
  00325	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  0032d	48 c7 44 24 70
	fe ff ff ff	 mov	 QWORD PTR $T27002[rsp], -2
  00336	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0033d	48 33 c4	 xor	 rax, rsp
  00340	48 89 44 24 78	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 126  : 	int m=1;

  00345	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR m$[rsp], 1

; 127  : 	TCHAR szMsg[15];
; 128  : 
; 129  : 	try
; 130  : 	{
; 131  : 		m=m/n;

  0034d	8b 44 24 20	 mov	 eax, DWORD PTR m$[rsp]
  00351	99		 cdq
  00352	f7 bc 24 98 00
	00 00		 idiv	 DWORD PTR n$[rsp]
  00359	89 44 24 20	 mov	 DWORD PTR m$[rsp], eax
$LN7@TestTry:

; 132  : 	}
; 133  : 	catch(...)
; 134  : 	{
; 135  : 		_stprintf(szMsg, _T("CppEH Caught %d/%d"),m,n);
; 136  : 		MessageBox(hWnd, szMsg, _T("AdvDbg-VC8Win32"),MB_OK);
; 137  : 	}
; 138  : 	return m;

  0035d	8b 44 24 20	 mov	 eax, DWORD PTR m$[rsp]

; 139  : }

  00361	48 8b f8	 mov	 rdi, rax
  00364	48 8b cc	 mov	 rcx, rsp
  00367	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?TestTry@@YAHPEAUHWND__@@H@Z$rtcFrameData
  0036e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00373	48 8b c7	 mov	 rax, rdi
  00376	48 8b 4c 24 78	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0037b	48 33 cc	 xor	 rcx, rsp
  0037e	e8 00 00 00 00	 call	 __security_check_cookie
  00383	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0038a	5f		 pop	 rdi
  0038b	c3		 ret	 0
?TestTry@@YAHPEAUHWND__@@H@Z ENDP			; TestTry
; Function compile flags: /Odtp /RTCsu
m$ = 32
szMsg$ = 56
$T27002 = 112
__$ArrayPad$ = 120
hWnd$ = 144
n$ = 152
?catch$0@?0??TestTry@@YAHPEAUHWND__@@H@Z@4HA PROC	; `TestTry'::`1'::catch$0

; 133  : 	catch(...)

  00390	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00395	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0039a	55		 push	 rbp
  0039b	57		 push	 rdi
  0039c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  003a0	48 8b ea	 mov	 rbp, rdx
__catch$?TestTry@@YAHPEAUHWND__@@H@Z$0:

; 134  : 	{
; 135  : 		_stprintf(szMsg, _T("CppEH Caught %d/%d"),m,n);

  003a3	44 8b 8d 98 00
	00 00		 mov	 r9d, DWORD PTR n$[rbp]
  003aa	44 8b 45 20	 mov	 r8d, DWORD PTR m$[rbp]
  003ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG26862
  003b5	48 8d 4d 38	 lea	 rcx, QWORD PTR szMsg$[rbp]
  003b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__swprintf

; 136  : 		MessageBox(hWnd, szMsg, _T("AdvDbg-VC8Win32"),MB_OK);

  003bf	45 33 c9	 xor	 r9d, r9d
  003c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG26863
  003c9	48 8d 55 38	 lea	 rdx, QWORD PTR szMsg$[rbp]
  003cd	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR hWnd$[rbp]
  003d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MessageBoxW
  003da	90		 npad	 1

; 137  : 	}

  003db	48 8d 05 7b ff
	ff ff		 lea	 rax, $LN7@catch$0
  003e2	eb 00		 jmp	 SHORT $LN8@catch$0
$LN8@catch$0:
  003e4	48 83 c4 28	 add	 rsp, 40			; 00000028H
  003e8	5f		 pop	 rdi
  003e9	5d		 pop	 rbp
  003ea	c3		 ret	 0
  003eb	cc		 int	 3
?catch$0@?0??TestTry@@YAHPEAUHWND__@@H@Z@4HA ENDP	; `TestTry'::`1'::catch$0
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z		; TestTryOver2Bytes
pdata	SEGMENT
$pdata$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z DD imagerel $LN9
	DD	imagerel $LN9+188
	DD	imagerel $unwind$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z
$pdata$?catch$0@?0??TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z@4HA DD imagerel ?catch$0@?0??TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z@4HA
	DD	imagerel ?catch$0@?0??TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z@4HA+92
	DD	imagerel $unwind$?catch$0@?0??TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z@4HA
pdata	ENDS
xdata	SEGMENT
$stateUnwindMap$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$handlerMap$0$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z@4HA
	DD	048H
$tryMap$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z
$unwind$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z DD 024519H
	DD	0700af211H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z
	DD	07bH
$unwind$?catch$0@?0??TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z@4HA DD 031019H
	DD	0700c4210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z
$ip2state$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z DD imagerel ?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z
	DD	0ffffffffH
	DD	imagerel ?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z+125
	DD	00H
	DD	imagerel ?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z+141
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z@4HA+19
	DD	01H
	DD	imagerel ?catch$0@?0??TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z@4HA+75
	DD	00H
xdata	ENDS
CONST	SEGMENT
?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z$rtcName$0 DB 073H ; TestTryOver2Bytes
	DB	07aH
	DB	04dH
	DB	073H
	DB	067H
	DB	00H
	ORG $+2
?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z$rtcVarDesc DD 038H ; TestTryOver2Bytes
	DD	01eH
	DQ	FLAT:?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z$rtcName$0
	ORG $+48
?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z$rtcFrameData DD 01H ; TestTryOver2Bytes
	DD	00H
	DQ	FLAT:?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z$rtcVarDesc
$cppxdata$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z
	DD	01H
	DD	imagerel $tryMap$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z
	DD	06H
	DD	imagerel $ip2state$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z
	DD	070H
	DD	00H
	DD	00H
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
_TEXT	SEGMENT
m$ = 32
szMsg$ = 56
$T27029 = 112
__$ArrayPad$ = 120
hWnd$ = 144
n$ = 152
?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z PROC		; TestTryOver2Bytes

; 141  : {

$LN9:
  00400	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00404	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00409	57		 push	 rdi
  0040a	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00411	48 8b fc	 mov	 rdi, rsp
  00414	48 b9 20 00 00
	00 00 00 00 00	 mov	 rcx, 32			; 00000020H
  0041e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00423	f3 ab		 rep stosd
  00425	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  0042d	48 c7 44 24 70
	fe ff ff ff	 mov	 QWORD PTR $T27029[rsp], -2
  00436	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0043d	48 33 c4	 xor	 rax, rsp
  00440	48 89 44 24 78	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 	int m=1;

  00445	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR m$[rsp], 1

; 143  : 	TCHAR szMsg[15];
; 144  : 	_stprintf(szMsg, _T("I am overflow 2 by"));

  0044d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG26870
  00454	48 8d 4c 24 38	 lea	 rcx, QWORD PTR szMsg$[rsp]
  00459	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__swprintf

; 145  : 	MessageBox(hWnd, szMsg, _T("AdvDbg-VC8Win32"),MB_OK);

  0045f	45 33 c9	 xor	 r9d, r9d
  00462	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG26871
  00469	48 8d 54 24 38	 lea	 rdx, QWORD PTR szMsg$[rsp]
  0046e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  00476	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MessageBoxW
  0047c	90		 npad	 1

; 146  : 
; 147  : 	try
; 148  : 	{
; 149  : 		m=m/n;

  0047d	8b 44 24 20	 mov	 eax, DWORD PTR m$[rsp]
  00481	99		 cdq
  00482	f7 bc 24 98 00
	00 00		 idiv	 DWORD PTR n$[rsp]
  00489	89 44 24 20	 mov	 DWORD PTR m$[rsp], eax
$LN7@TestTryOve:

; 150  : 	}
; 151  : 	catch(...)
; 152  : 	{
; 153  : 		_stprintf(szMsg, _T("CppEH Caught %d/%d"),m,n);
; 154  : 		MessageBox(hWnd, szMsg, _T("AdvDbg-VC8Win32"),MB_OK);
; 155  : 	}
; 156  : 	return m;

  0048d	8b 44 24 20	 mov	 eax, DWORD PTR m$[rsp]

; 157  : }

  00491	48 8b f8	 mov	 rdi, rax
  00494	48 8b cc	 mov	 rcx, rsp
  00497	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z$rtcFrameData
  0049e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004a3	48 8b c7	 mov	 rax, rdi
  004a6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004ab	48 33 cc	 xor	 rcx, rsp
  004ae	e8 00 00 00 00	 call	 __security_check_cookie
  004b3	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  004ba	5f		 pop	 rdi
  004bb	c3		 ret	 0
?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z ENDP		; TestTryOver2Bytes
; Function compile flags: /Odtp /RTCsu
m$ = 32
szMsg$ = 56
$T27029 = 112
__$ArrayPad$ = 120
hWnd$ = 144
n$ = 152
?catch$0@?0??TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z@4HA PROC ; `TestTryOver2Bytes'::`1'::catch$0

; 151  : 	catch(...)

  004c0	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  004c5	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  004ca	55		 push	 rbp
  004cb	57		 push	 rdi
  004cc	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  004d0	48 8b ea	 mov	 rbp, rdx
__catch$?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z$0:

; 152  : 	{
; 153  : 		_stprintf(szMsg, _T("CppEH Caught %d/%d"),m,n);

  004d3	44 8b 8d 98 00
	00 00		 mov	 r9d, DWORD PTR n$[rbp]
  004da	44 8b 45 20	 mov	 r8d, DWORD PTR m$[rbp]
  004de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG26873
  004e5	48 8d 4d 38	 lea	 rcx, QWORD PTR szMsg$[rbp]
  004e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__swprintf

; 154  : 		MessageBox(hWnd, szMsg, _T("AdvDbg-VC8Win32"),MB_OK);

  004ef	45 33 c9	 xor	 r9d, r9d
  004f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG26874
  004f9	48 8d 55 38	 lea	 rdx, QWORD PTR szMsg$[rbp]
  004fd	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR hWnd$[rbp]
  00504	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MessageBoxW
  0050a	90		 npad	 1

; 155  : 	}

  0050b	48 8d 05 7b ff
	ff ff		 lea	 rax, $LN7@catch$0@2
  00512	eb 00		 jmp	 SHORT $LN8@catch$0@2
$LN8@catch$0@2:
  00514	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00518	5f		 pop	 rdi
  00519	5d		 pop	 rbp
  0051a	c3		 ret	 0
  0051b	cc		 int	 3
?catch$0@?0??TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z@4HA ENDP ; `TestTryOver2Bytes'::`1'::catch$0
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z		; TestTryOver16Bytes
pdata	SEGMENT
$pdata$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z DD imagerel $LN9
	DD	imagerel $LN9+188
	DD	imagerel $unwind$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z
$pdata$?catch$0@?0??TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z@4HA DD imagerel ?catch$0@?0??TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z@4HA
	DD	imagerel ?catch$0@?0??TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z@4HA+92
	DD	imagerel $unwind$?catch$0@?0??TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z@4HA
pdata	ENDS
xdata	SEGMENT
$stateUnwindMap$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$handlerMap$0$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z DD 00H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z@4HA
	DD	048H
$tryMap$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z
$unwind$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z DD 024519H
	DD	0700af211H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z
	DD	07bH
$unwind$?catch$0@?0??TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z@4HA DD 031019H
	DD	0700c4210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z
$ip2state$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z DD imagerel ?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z
	DD	0ffffffffH
	DD	imagerel ?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z+125
	DD	00H
	DD	imagerel ?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z+141
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z@4HA+19
	DD	01H
	DD	imagerel ?catch$0@?0??TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z@4HA+75
	DD	00H
xdata	ENDS
CONST	SEGMENT
?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z$rtcName$0 DB 073H ; TestTryOver16Bytes
	DB	07aH
	DB	04dH
	DB	073H
	DB	067H
	DB	00H
	ORG $+2
?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z$rtcVarDesc DD 038H ; TestTryOver16Bytes
	DD	01eH
	DQ	FLAT:?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z$rtcName$0
	ORG $+48
?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z$rtcFrameData DD 01H ; TestTryOver16Bytes
	DD	00H
	DQ	FLAT:?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z$rtcVarDesc
$cppxdata$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z
	DD	01H
	DD	imagerel $tryMap$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z
	DD	06H
	DD	imagerel $ip2state$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z
	DD	070H
	DD	00H
	DD	00H
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
_TEXT	SEGMENT
m$ = 32
szMsg$ = 56
$T27052 = 112
__$ArrayPad$ = 120
hWnd$ = 144
n$ = 152
?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z PROC		; TestTryOver16Bytes

; 159  : {

$LN9:
  00530	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00534	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00539	57		 push	 rdi
  0053a	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00541	48 8b fc	 mov	 rdi, rsp
  00544	48 b9 20 00 00
	00 00 00 00 00	 mov	 rcx, 32			; 00000020H
  0054e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00553	f3 ab		 rep stosd
  00555	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  0055d	48 c7 44 24 70
	fe ff ff ff	 mov	 QWORD PTR $T27052[rsp], -2
  00566	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0056d	48 33 c4	 xor	 rax, rsp
  00570	48 89 44 24 78	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 160  : 	int m=1;

  00575	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR m$[rsp], 1

; 161  : 	TCHAR szMsg[15];
; 162  : 	_stprintf(szMsg, _T("I am overflow 16 bytes..."));

  0057d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG26881
  00584	48 8d 4c 24 38	 lea	 rcx, QWORD PTR szMsg$[rsp]
  00589	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__swprintf

; 163  : 	MessageBox(hWnd, szMsg, _T("AdvDbg-VC8Win32"),MB_OK);

  0058f	45 33 c9	 xor	 r9d, r9d
  00592	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG26882
  00599	48 8d 54 24 38	 lea	 rdx, QWORD PTR szMsg$[rsp]
  0059e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  005a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MessageBoxW
  005ac	90		 npad	 1

; 164  : 
; 165  : 	try
; 166  : 	{
; 167  : 		m=m/n;

  005ad	8b 44 24 20	 mov	 eax, DWORD PTR m$[rsp]
  005b1	99		 cdq
  005b2	f7 bc 24 98 00
	00 00		 idiv	 DWORD PTR n$[rsp]
  005b9	89 44 24 20	 mov	 DWORD PTR m$[rsp], eax
$LN7@TestTryOve@2:

; 168  : 	}
; 169  : 	catch(...)
; 170  : 	{
; 171  : 		_stprintf(szMsg, _T("CppEH Caught %d/%d"),m,n);
; 172  : 		MessageBox(hWnd, szMsg, _T("AdvDbg-VC8Win32"),MB_OK);
; 173  : 	}
; 174  : 	return m;

  005bd	8b 44 24 20	 mov	 eax, DWORD PTR m$[rsp]

; 175  : }

  005c1	48 8b f8	 mov	 rdi, rax
  005c4	48 8b cc	 mov	 rcx, rsp
  005c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z$rtcFrameData
  005ce	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  005d3	48 8b c7	 mov	 rax, rdi
  005d6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005db	48 33 cc	 xor	 rcx, rsp
  005de	e8 00 00 00 00	 call	 __security_check_cookie
  005e3	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  005ea	5f		 pop	 rdi
  005eb	c3		 ret	 0
?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z ENDP		; TestTryOver16Bytes
; Function compile flags: /Odtp /RTCsu
m$ = 32
szMsg$ = 56
$T27052 = 112
__$ArrayPad$ = 120
hWnd$ = 144
n$ = 152
?catch$0@?0??TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z@4HA PROC ; `TestTryOver16Bytes'::`1'::catch$0

; 169  : 	catch(...)

  005f0	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  005f5	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  005fa	55		 push	 rbp
  005fb	57		 push	 rdi
  005fc	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00600	48 8b ea	 mov	 rbp, rdx
__catch$?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z$0:

; 170  : 	{
; 171  : 		_stprintf(szMsg, _T("CppEH Caught %d/%d"),m,n);

  00603	44 8b 8d 98 00
	00 00		 mov	 r9d, DWORD PTR n$[rbp]
  0060a	44 8b 45 20	 mov	 r8d, DWORD PTR m$[rbp]
  0060e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG26884
  00615	48 8d 4d 38	 lea	 rcx, QWORD PTR szMsg$[rbp]
  00619	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__swprintf

; 172  : 		MessageBox(hWnd, szMsg, _T("AdvDbg-VC8Win32"),MB_OK);

  0061f	45 33 c9	 xor	 r9d, r9d
  00622	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG26885
  00629	48 8d 55 38	 lea	 rdx, QWORD PTR szMsg$[rbp]
  0062d	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR hWnd$[rbp]
  00634	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MessageBoxW
  0063a	90		 npad	 1

; 173  : 	}

  0063b	48 8d 05 7b ff
	ff ff		 lea	 rax, $LN7@catch$0@3
  00642	eb 00		 jmp	 SHORT $LN8@catch$0@3
$LN8@catch$0@3:
  00644	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00648	5f		 pop	 rdi
  00649	5d		 pop	 rbp
  0064a	c3		 ret	 0
  0064b	cc		 int	 3
?catch$0@?0??TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z@4HA ENDP ; `TestTryOver16Bytes'::`1'::catch$0
_TEXT	ENDS
PUBLIC	?About@@YA_JPEAUHWND__@@I_K_J@Z			; About
PUBLIC	__$ArrayPad$
EXTRN	__GSHandlerCheck:PROC
EXTRN	__imp_PostQuitMessage:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_DefWindowProcW:PROC
EXTRN	__imp_DestroyWindow:PROC
EXTRN	__imp_DialogBoxParamW:PROC
pdata	SEGMENT
$pdata$?WndProc@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN17
	DD	imagerel $LN17+542
	DD	imagerel $unwind$?WndProc@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?WndProc@@YA_JPEAUHWND__@@I_K_J@Z DD 034919H
	DD	01a011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
xdata	ENDS
CONST	SEGMENT
?WndProc@@YA_JPEAUHWND__@@I_K_J@Z$rtcName$0 DB 070H	; WndProc
	DB	073H
	DB	00H
	ORG $+5
?WndProc@@YA_JPEAUHWND__@@I_K_J@Z$rtcVarDesc DD 050H	; WndProc
	DD	048H
	DQ	FLAT:?WndProc@@YA_JPEAUHWND__@@I_K_J@Z$rtcName$0
	ORG $+48
?WndProc@@YA_JPEAUHWND__@@I_K_J@Z$rtcFrameData DD 01H	; WndProc
	DD	00H
	DQ	FLAT:?WndProc@@YA_JPEAUHWND__@@I_K_J@Z$rtcVarDesc
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
_TEXT	SEGMENT
wmId$ = 48
wmEvent$ = 52
ps$ = 80
hdc$ = 168
tv64 = 184
tv71 = 188
__$ArrayPad$ = 192
hWnd$ = 224
message$ = 232
wParam$ = 240
lParam$ = 248
?WndProc@@YA_JPEAUHWND__@@I_K_J@Z PROC			; WndProc

; 187  : {

$LN17:
  00660	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00665	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0066a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0066e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00673	57		 push	 rdi
  00674	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0067b	48 8b fc	 mov	 rdi, rsp
  0067e	48 b9 34 00 00
	00 00 00 00 00	 mov	 rcx, 52			; 00000034H
  00688	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0068d	f3 ab		 rep stosd
  0068f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]
  00697	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0069e	48 33 c4	 xor	 rax, rsp
  006a1	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 188  : 	int wmId, wmEvent;
; 189  : 	PAINTSTRUCT ps;
; 190  : 	HDC hdc;
; 191  : 
; 192  : 	switch (message)

  006a9	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR message$[rsp]
  006b0	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv64[rsp], eax
  006b7	83 bc 24 b8 00
	00 00 02	 cmp	 DWORD PTR tv64[rsp], 2
  006bf	0f 84 58 01 00
	00		 je	 $LN2@WndProc
  006c5	83 bc 24 b8 00
	00 00 0f	 cmp	 DWORD PTR tv64[rsp], 15
  006cd	0f 84 1a 01 00
	00		 je	 $LN3@WndProc
  006d3	81 bc 24 b8 00
	00 00 11 01 00
	00		 cmp	 DWORD PTR tv64[rsp], 273 ; 00000111H
  006de	74 05		 je	 SHORT $LN12@WndProc
  006e0	e9 42 01 00 00	 jmp	 $LN1@WndProc
$LN12@WndProc:

; 193  : 	{
; 194  : 	case WM_COMMAND:
; 195  : 		wmId    = LOWORD(wParam);

  006e5	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR wParam$[rsp]
  006ed	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  006f3	0f b7 c0	 movzx	 eax, ax
  006f6	89 44 24 30	 mov	 DWORD PTR wmId$[rsp], eax

; 196  : 		wmEvent = HIWORD(wParam);

  006fa	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR wParam$[rsp]
  00702	48 c1 e8 10	 shr	 rax, 16
  00706	0f b7 c0	 movzx	 eax, ax
  00709	89 44 24 34	 mov	 DWORD PTR wmEvent$[rsp], eax

; 197  : 		// Parse the menu selections:
; 198  : 		switch (wmId)

  0070d	8b 44 24 30	 mov	 eax, DWORD PTR wmId$[rsp]
  00711	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv71[rsp], eax
  00718	83 bc 24 bc 00
	00 00 68	 cmp	 DWORD PTR tv71[rsp], 104 ; 00000068H
  00720	74 33		 je	 SHORT $LN9@WndProc
  00722	83 bc 24 bc 00
	00 00 69	 cmp	 DWORD PTR tv71[rsp], 105 ; 00000069H
  0072a	74 55		 je	 SHORT $LN8@WndProc
  0072c	81 bc 24 bc 00
	00 00 03 80 00
	00		 cmp	 DWORD PTR tv71[rsp], 32771 ; 00008003H
  00737	74 58		 je	 SHORT $LN7@WndProc
  00739	81 bc 24 bc 00
	00 00 04 80 00
	00		 cmp	 DWORD PTR tv71[rsp], 32772 ; 00008004H
  00744	74 5c		 je	 SHORT $LN6@WndProc
  00746	81 bc 24 bc 00
	00 00 05 80 00
	00		 cmp	 DWORD PTR tv71[rsp], 32773 ; 00008005H
  00751	74 60		 je	 SHORT $LN5@WndProc
  00753	eb 6f		 jmp	 SHORT $LN4@WndProc
$LN9@WndProc:

; 199  : 		{
; 200  : 		case IDM_ABOUT:
; 201  : 			DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);

  00755	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0075e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?About@@YA_JPEAUHWND__@@I_K_J@Z ; About
  00765	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR hWnd$[rsp]
  0076d	ba 67 00 00 00	 mov	 edx, 103		; 00000067H
  00772	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?hInst@@3PEAUHINSTANCE__@@EA ; hInst
  00779	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DialogBoxParamW

; 202  : 			break;

  0077f	eb 6a		 jmp	 SHORT $LN10@WndProc
$LN8@WndProc:

; 203  : 		case IDM_EXIT:
; 204  : 			DestroyWindow(hWnd);

  00781	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  00789	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DestroyWindow

; 205  : 			break;

  0078f	eb 5a		 jmp	 SHORT $LN10@WndProc
$LN7@WndProc:

; 206  : 		case IDM_TRY:
; 207  : 			TestTry(hWnd,0);

  00791	33 d2		 xor	 edx, edx
  00793	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  0079b	e8 00 00 00 00	 call	 ?TestTry@@YAHPEAUHWND__@@H@Z ; TestTry

; 208  : 			break;

  007a0	eb 49		 jmp	 SHORT $LN10@WndProc
$LN6@WndProc:

; 209  : 		case IDM_OVER2BYTES:
; 210  : 			TestTryOver2Bytes(hWnd,0);

  007a2	33 d2		 xor	 edx, edx
  007a4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  007ac	e8 00 00 00 00	 call	 ?TestTryOver2Bytes@@YAHPEAUHWND__@@H@Z ; TestTryOver2Bytes

; 211  : 			break;

  007b1	eb 38		 jmp	 SHORT $LN10@WndProc
$LN5@WndProc:

; 212  : 		case IDM_OVER16BYTES:
; 213  : 			TestTryOver16Bytes(hWnd,0);

  007b3	33 d2		 xor	 edx, edx
  007b5	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  007bd	e8 00 00 00 00	 call	 ?TestTryOver16Bytes@@YAHPEAUHWND__@@H@Z ; TestTryOver16Bytes

; 214  : 			break;

  007c2	eb 27		 jmp	 SHORT $LN10@WndProc
$LN4@WndProc:

; 215  : 		default:
; 216  : 			return DefWindowProc(hWnd, message, wParam, lParam);

  007c4	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR lParam$[rsp]
  007cc	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR wParam$[rsp]
  007d4	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR message$[rsp]
  007db	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  007e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcW
  007e9	eb 65		 jmp	 SHORT $LN15@WndProc
$LN10@WndProc:

; 217  : 		}
; 218  : 		break;

  007eb	eb 61		 jmp	 SHORT $LN13@WndProc
$LN3@WndProc:

; 219  : 	case WM_PAINT:
; 220  : 		hdc = BeginPaint(hWnd, &ps);

  007ed	48 8d 54 24 50	 lea	 rdx, QWORD PTR ps$[rsp]
  007f2	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  007fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  00800	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR hdc$[rsp], rax

; 221  : 		// TODO: Add any drawing code here...
; 222  : 		EndPaint(hWnd, &ps);

  00808	48 8d 54 24 50	 lea	 rdx, QWORD PTR ps$[rsp]
  0080d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  00815	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 223  : 		break;

  0081b	eb 31		 jmp	 SHORT $LN13@WndProc
$LN2@WndProc:

; 224  : 	case WM_DESTROY:
; 225  : 		PostQuitMessage(0);

  0081d	33 c9		 xor	 ecx, ecx
  0081f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PostQuitMessage

; 226  : 		break;

  00825	eb 27		 jmp	 SHORT $LN13@WndProc
$LN1@WndProc:

; 227  : 	default:
; 228  : 		return DefWindowProc(hWnd, message, wParam, lParam);

  00827	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR lParam$[rsp]
  0082f	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR wParam$[rsp]
  00837	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR message$[rsp]
  0083e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  00846	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcW
  0084c	eb 02		 jmp	 SHORT $LN15@WndProc
$LN13@WndProc:

; 229  : 	}
; 230  : 	return 0;

  0084e	33 c0		 xor	 eax, eax
$LN15@WndProc:

; 231  : }

  00850	48 8b f8	 mov	 rdi, rax
  00853	48 8b cc	 mov	 rcx, rsp
  00856	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?WndProc@@YA_JPEAUHWND__@@I_K_J@Z$rtcFrameData
  0085d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00862	48 8b c7	 mov	 rax, rdi
  00865	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0086d	48 33 cc	 xor	 rcx, rsp
  00870	e8 00 00 00 00	 call	 __security_check_cookie
  00875	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  0087c	5f		 pop	 rdi
  0087d	c3		 ret	 0
?WndProc@@YA_JPEAUHWND__@@I_K_J@Z ENDP			; WndProc
_TEXT	ENDS
EXTRN	__imp_EndDialog:PROC
pdata	SEGMENT
$pdata$?About@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN9
	DD	imagerel $LN9+177
	DD	imagerel $unwind$?About@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?About@@YA_JPEAUHWND__@@I_K_J@Z DD 023101H
	DD	070145218H
; Function compile flags: /Odtp /RTCsu
xdata	ENDS
_TEXT	SEGMENT
tv64 = 32
hDlg$ = 64
message$ = 72
wParam$ = 80
lParam$ = 88
?About@@YA_JPEAUHWND__@@I_K_J@Z PROC			; About

; 235  : {

$LN9:
  00890	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00895	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0089a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0089e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  008a3	57		 push	 rdi
  008a4	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  008a8	48 8b fc	 mov	 rdi, rsp
  008ab	48 b9 0c 00 00
	00 00 00 00 00	 mov	 rcx, 12
  008b5	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  008ba	f3 ab		 rep stosd
  008bc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 236  : 	UNREFERENCED_PARAMETER(lParam);
; 237  : 	switch (message)

  008c1	8b 44 24 48	 mov	 eax, DWORD PTR message$[rsp]
  008c5	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  008c9	81 7c 24 20 10
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 272 ; 00000110H
  008d1	74 0c		 je	 SHORT $LN4@About
  008d3	81 7c 24 20 11
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 273 ; 00000111H
  008db	74 0e		 je	 SHORT $LN3@About
  008dd	eb 5a		 jmp	 SHORT $LN5@About
$LN4@About:

; 238  : 	{
; 239  : 	case WM_INITDIALOG:
; 240  : 		return (INT_PTR)TRUE;

  008df	48 b8 01 00 00
	00 00 00 00 00	 mov	 rax, 1
  008e9	eb 50		 jmp	 SHORT $LN7@About
$LN3@About:

; 241  : 
; 242  : 	case WM_COMMAND:
; 243  : 		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)

  008eb	48 8b 44 24 50	 mov	 rax, QWORD PTR wParam$[rsp]
  008f0	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  008f6	0f b7 c0	 movzx	 eax, ax
  008f9	83 f8 01	 cmp	 eax, 1
  008fc	74 13		 je	 SHORT $LN1@About
  008fe	48 8b 44 24 50	 mov	 rax, QWORD PTR wParam$[rsp]
  00903	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  00909	0f b7 c0	 movzx	 eax, ax
  0090c	83 f8 02	 cmp	 eax, 2
  0090f	75 28		 jne	 SHORT $LN2@About
$LN1@About:

; 244  : 		{
; 245  : 			EndDialog(hDlg, LOWORD(wParam));

  00911	48 8b 44 24 50	 mov	 rax, QWORD PTR wParam$[rsp]
  00916	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  0091c	0f b7 c0	 movzx	 eax, ax
  0091f	48 8b d0	 mov	 rdx, rax
  00922	48 8b 4c 24 40	 mov	 rcx, QWORD PTR hDlg$[rsp]
  00927	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndDialog

; 246  : 			return (INT_PTR)TRUE;

  0092d	48 b8 01 00 00
	00 00 00 00 00	 mov	 rax, 1
  00937	eb 02		 jmp	 SHORT $LN7@About
$LN2@About:
$LN5@About:

; 247  : 		}
; 248  : 		break;
; 249  : 	}
; 250  : 	return (INT_PTR)FALSE;

  00939	33 c0		 xor	 eax, eax
$LN7@About:

; 251  : }

  0093b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0093f	5f		 pop	 rdi
  00940	c3		 ret	 0
?About@@YA_JPEAUHWND__@@I_K_J@Z ENDP			; About
_TEXT	ENDS
END
