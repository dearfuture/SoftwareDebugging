; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	c:\dig\dbg\author\code\chap24\VC8Win32\VC8Win32.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?hInst@@3PAUHINSTANCE__@@A			; hInst
PUBLIC	?szTitle@@3PA_WA				; szTitle
PUBLIC	?szWindowClass@@3PA_WA				; szWindowClass
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__imp__GetMessageW@16:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageW@4:PROC
EXTRN	__imp__LoadAcceleratorsW@8:PROC
EXTRN	__imp__TranslateAcceleratorW@12:PROC
EXTRN	__imp__LoadStringW@16:PROC
EXTRN	__imp__RegisterClassExW@4:PROC
EXTRN	__imp__LoadCursorW@8:PROC
EXTRN	__imp__LoadIconW@8:PROC
EXTRN	__imp__CreateWindowExW@48:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__UpdateWindow@4:PROC
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	__imp___swprintf:PROC
EXTRN	__imp__DefWindowProcW@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__EndDialog@8:PROC
?hInst@@3PAUHINSTANCE__@@A DD 01H DUP (?)		; hInst
?szTitle@@3PA_WA DW 064H DUP (?)			; szTitle
?szWindowClass@@3PA_WA DW 064H DUP (?)			; szWindowClass
$SG-369	DB	'C', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'H', 00H, ' ', 00H
	DB	'C', 00H, 'a', 00H, 'u', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' '
	DB	00H, '%', 00H, 'd', 00H, '/', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-370	DB	'A', 00H, 'd', 00H, 'v', 00H, 'D', 00H, 'b', 00H, 'g', 00H
	DB	'-', 00H, 'V', 00H, 'C', 00H, '8', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, '3', 00H, '2', 00H, 00H, 00H
$SG-371	DB	'I', 00H, ' ', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'o', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'w'
	DB	00H, ' ', 00H, '2', 00H, ' ', 00H, 'b', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG-372	DB	'A', 00H, 'd', 00H, 'v', 00H, 'D', 00H, 'b', 00H, 'g', 00H
	DB	'-', 00H, 'V', 00H, 'C', 00H, '8', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, '3', 00H, '2', 00H, 00H, 00H
$SG-373	DB	'C', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'H', 00H, ' ', 00H
	DB	'C', 00H, 'a', 00H, 'u', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' '
	DB	00H, '%', 00H, 'd', 00H, '/', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-374	DB	'A', 00H, 'd', 00H, 'v', 00H, 'D', 00H, 'b', 00H, 'g', 00H
	DB	'-', 00H, 'V', 00H, 'C', 00H, '8', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, '3', 00H, '2', 00H, 00H, 00H
$SG-375	DB	'I', 00H, ' ', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'o', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'w'
	DB	00H, ' ', 00H, '1', 00H, '6', 00H, ' ', 00H, 'b', 00H, 'y', 00H
	DB	't', 00H, 'e', 00H, 's', 00H, '.', 00H, '.', 00H, '.', 00H, 00H
	DB	00H
$SG-376	DB	'A', 00H, 'd', 00H, 'v', 00H, 'D', 00H, 'b', 00H, 'g', 00H
	DB	'-', 00H, 'V', 00H, 'C', 00H, '8', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, '3', 00H, '2', 00H, 00H, 00H
$SG-377	DB	'C', 00H, 'p', 00H, 'p', 00H, 'E', 00H, 'H', 00H, ' ', 00H
	DB	'C', 00H, 'a', 00H, 'u', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' '
	DB	00H, '%', 00H, 'd', 00H, '/', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-378	DB	'A', 00H, 'd', 00H, 'v', 00H, 'D', 00H, 'b', 00H, 'g', 00H
	DB	'-', 00H, 'V', 00H, 'C', 00H, '8', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, '3', 00H, '2', 00H, 00H, 00H
PUBLIC	?About@@YGHPAUHWND__@@IIJ@Z			; About
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_hDlg$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?About@@YGHPAUHWND__@@IIJ@Z PROC			; About
; File c:\dig\dbg\author\code\chap24\vc8win32\vc8win32.cpp
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 237
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN4@About
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	SHORT $LN3@About
	jmp	SHORT $LN5@About
$LN4@About:
; Line 240
	mov	eax, 1
	jmp	SHORT $LN7@About
$LN3@About:
; Line 243
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 1
	je	SHORT $LN1@About
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 2
	jne	SHORT $LN5@About
$LN1@About:
; Line 245
	mov	edx, DWORD PTR _wParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	push	eax
	mov	ecx, DWORD PTR _hDlg$[ebp]
	push	ecx
	call	DWORD PTR __imp__EndDialog@8
; Line 246
	mov	eax, 1
	jmp	SHORT $LN7@About
$LN5@About:
; Line 250
	xor	eax, eax
$LN7@About:
; Line 251
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?About@@YGHPAUHWND__@@IIJ@Z ENDP			; About
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z		; TestTryOver16Bytes
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
xdata$x	SEGMENT
__catchsym$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z$0
__unwindtable$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z$2
__ehfuncinfo$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_m$ = -56						; size = 4
_szMsg$ = -52						; size = 30
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_hWnd$ = 8						; size = 4
_n$ = 12						; size = 4
?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z PROC		; TestTryOver16Bytes
; Line 159
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 160
	mov	DWORD PTR _m$[ebp], 1
; Line 162
	push	OFFSET $SG-375
	lea	eax, DWORD PTR _szMsg$[ebp]
	push	eax
	call	DWORD PTR __imp___swprintf
	add	esp, 8
; Line 163
	push	0
	push	OFFSET $SG-376
	lea	ecx, DWORD PTR _szMsg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__MessageBoxW@16
; Line 166
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 167
	mov	eax, DWORD PTR _m$[ebp]
	cdq
	idiv	DWORD PTR _n$[ebp]
	mov	DWORD PTR _m$[ebp], eax
; Line 169
	jmp	SHORT $LN4@TestTryOve
__catch$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z$0:
; Line 171
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	push	OFFSET $SG-377
	lea	edx, DWORD PTR _szMsg$[ebp]
	push	edx
	call	DWORD PTR __imp___swprintf
	add	esp, 16					; 00000010H
; Line 172
	push	0
	push	OFFSET $SG-378
	lea	eax, DWORD PTR _szMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__MessageBoxW@16
	mov	eax, __tryend$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z$1
	ret	0
$LN4@TestTryOve:
; Line 173
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z$1:
; Line 174
	mov	eax, DWORD PTR _m$[ebp]
; Line 175
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z ENDP		; TestTryOver16Bytes
PUBLIC	__$ArrayPad$
PUBLIC	?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z		; TestTryOver2Bytes
xdata$x	SEGMENT
__catchsym$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z$0
__unwindtable$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z$2
__ehfuncinfo$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_m$ = -56						; size = 4
_szMsg$ = -52						; size = 30
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_hWnd$ = 8						; size = 4
_n$ = 12						; size = 4
?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z PROC		; TestTryOver2Bytes
; Line 141
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 142
	mov	DWORD PTR _m$[ebp], 1
; Line 144
	push	OFFSET $SG-371
	lea	eax, DWORD PTR _szMsg$[ebp]
	push	eax
	call	DWORD PTR __imp___swprintf
	add	esp, 8
; Line 145
	push	0
	push	OFFSET $SG-372
	lea	ecx, DWORD PTR _szMsg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__MessageBoxW@16
; Line 148
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 149
	mov	eax, DWORD PTR _m$[ebp]
	cdq
	idiv	DWORD PTR _n$[ebp]
	mov	DWORD PTR _m$[ebp], eax
; Line 151
	jmp	SHORT $LN4@TestTryOve@2
__catch$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z$0:
; Line 153
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	push	OFFSET $SG-373
	lea	edx, DWORD PTR _szMsg$[ebp]
	push	edx
	call	DWORD PTR __imp___swprintf
	add	esp, 16					; 00000010H
; Line 154
	push	0
	push	OFFSET $SG-374
	lea	eax, DWORD PTR _szMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__MessageBoxW@16
	mov	eax, __tryend$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z$1
	ret	0
$LN4@TestTryOve@2:
; Line 155
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z$1:
; Line 156
	mov	eax, DWORD PTR _m$[ebp]
; Line 157
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z ENDP		; TestTryOver2Bytes
PUBLIC	__$ArrayPad$
PUBLIC	?TestTry@@YAHPAUHWND__@@H@Z			; TestTry
xdata$x	SEGMENT
__catchsym$?TestTry@@YAHPAUHWND__@@H@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?TestTry@@YAHPAUHWND__@@H@Z$0
__unwindtable$?TestTry@@YAHPAUHWND__@@H@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?TestTry@@YAHPAUHWND__@@H@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?TestTry@@YAHPAUHWND__@@H@Z$2
__ehfuncinfo$?TestTry@@YAHPAUHWND__@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TestTry@@YAHPAUHWND__@@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$?TestTry@@YAHPAUHWND__@@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
_m$ = -56						; size = 4
_szMsg$ = -52						; size = 30
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_hWnd$ = 8						; size = 4
_n$ = 12						; size = 4
?TestTry@@YAHPAUHWND__@@H@Z PROC			; TestTry
; Line 125
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TestTry@@YAHPAUHWND__@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 126
	mov	DWORD PTR _m$[ebp], 1
; Line 130
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 131
	mov	eax, DWORD PTR _m$[ebp]
	cdq
	idiv	DWORD PTR _n$[ebp]
	mov	DWORD PTR _m$[ebp], eax
; Line 133
	jmp	SHORT $LN4@TestTry
__catch$?TestTry@@YAHPAUHWND__@@H@Z$0:
; Line 135
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	push	OFFSET $SG-369
	lea	edx, DWORD PTR _szMsg$[ebp]
	push	edx
	call	DWORD PTR __imp___swprintf
	add	esp, 16					; 00000010H
; Line 136
	push	0
	push	OFFSET $SG-370
	lea	eax, DWORD PTR _szMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__MessageBoxW@16
	mov	eax, __tryend$?TestTry@@YAHPAUHWND__@@H@Z$1
	ret	0
$LN4@TestTry:
; Line 137
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?TestTry@@YAHPAUHWND__@@H@Z$1:
; Line 138
	mov	eax, DWORD PTR _m$[ebp]
; Line 139
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?TestTry@@YAHPAUHWND__@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TestTry@@YAHPAUHWND__@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TestTry@@YAHPAUHWND__@@H@Z ENDP			; TestTry
PUBLIC	?InitInstance@@YAHPAUHINSTANCE__@@H@Z		; InitInstance
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hWnd$ = -4						; size = 4
_hInstance$ = 8						; size = 4
_nCmdShow$ = 12						; size = 4
?InitInstance@@YAHPAUHINSTANCE__@@H@Z PROC		; InitInstance
; Line 106
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 109
	mov	eax, DWORD PTR _hInstance$[ebp]
	mov	DWORD PTR ?hInst@@3PAUHINSTANCE__@@A, eax ; hInst
; Line 112
	push	0
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	push	-2147483648				; 80000000H
	push	0
	push	-2147483648				; 80000000H
	push	13565952				; 00cf0000H
	push	OFFSET ?szTitle@@3PA_WA			; szTitle
	push	OFFSET ?szWindowClass@@3PA_WA		; szWindowClass
	push	0
	call	DWORD PTR __imp__CreateWindowExW@48
	mov	DWORD PTR _hWnd$[ebp], eax
; Line 114
	cmp	DWORD PTR _hWnd$[ebp], 0
	jne	SHORT $LN1@InitInstan
; Line 116
	xor	eax, eax
	jmp	SHORT $LN2@InitInstan
$LN1@InitInstan:
; Line 119
	mov	edx, DWORD PTR _nCmdShow$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
; Line 120
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__UpdateWindow@4
; Line 122
	mov	eax, 1
$LN2@InitInstan:
; Line 123
	mov	esp, ebp
	pop	ebp
	ret	0
?InitInstance@@YAHPAUHINSTANCE__@@H@Z ENDP		; InitInstance
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WndProc@@YGJPAUHWND__@@IIJ@Z			; WndProc
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = -92						; size = 4
tv64 = -88						; size = 4
_hdc$ = -84						; size = 4
_wmEvent$ = -80						; size = 4
_wmId$ = -76						; size = 4
_ps$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?WndProc@@YGJPAUHWND__@@IIJ@Z PROC			; WndProc
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 192
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 2
	je	$LN2@WndProc
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	$LN3@WndProc
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	SHORT $LN12@WndProc
	jmp	$LN1@WndProc
$LN12@WndProc:
; Line 195
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	mov	DWORD PTR _wmId$[ebp], edx
; Line 196
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	mov	DWORD PTR _wmEvent$[ebp], ecx
; Line 198
	mov	edx, DWORD PTR _wmId$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 32771		; 00008003H
	jg	SHORT $LN17@WndProc
	cmp	DWORD PTR tv71[ebp], 32771		; 00008003H
	je	SHORT $LN7@WndProc
	cmp	DWORD PTR tv71[ebp], 104		; 00000068H
	je	SHORT $LN9@WndProc
	cmp	DWORD PTR tv71[ebp], 105		; 00000069H
	je	SHORT $LN8@WndProc
	jmp	SHORT $LN4@WndProc
$LN17@WndProc:
	cmp	DWORD PTR tv71[ebp], 32772		; 00008004H
	je	SHORT $LN6@WndProc
	cmp	DWORD PTR tv71[ebp], 32773		; 00008005H
	je	SHORT $LN5@WndProc
	jmp	SHORT $LN4@WndProc
$LN9@WndProc:
; Line 201
	push	0
	push	OFFSET ?About@@YGHPAUHWND__@@IIJ@Z	; About
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	push	103					; 00000067H
	mov	ecx, DWORD PTR ?hInst@@3PAUHINSTANCE__@@A ; hInst
	push	ecx
	call	DWORD PTR __imp__DialogBoxParamW@20
; Line 202
	jmp	SHORT $LN10@WndProc
$LN8@WndProc:
; Line 204
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__DestroyWindow@4
; Line 205
	jmp	SHORT $LN10@WndProc
$LN7@WndProc:
; Line 207
	push	0
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	?TestTry@@YAHPAUHWND__@@H@Z		; TestTry
	add	esp, 8
; Line 208
	jmp	SHORT $LN10@WndProc
$LN6@WndProc:
; Line 210
	push	0
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	?TestTryOver2Bytes@@YAHPAUHWND__@@H@Z	; TestTryOver2Bytes
	add	esp, 8
; Line 211
	jmp	SHORT $LN10@WndProc
$LN5@WndProc:
; Line 213
	push	0
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	?TestTryOver16Bytes@@YAHPAUHWND__@@H@Z	; TestTryOver16Bytes
	add	esp, 8
; Line 214
	jmp	SHORT $LN10@WndProc
$LN4@WndProc:
; Line 216
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _message$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DefWindowProcW@16
	jmp	SHORT $LN15@WndProc
$LN10@WndProc:
; Line 218
	jmp	SHORT $LN13@WndProc
$LN3@WndProc:
; Line 220
	lea	ecx, DWORD PTR _ps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__BeginPaint@8
	mov	DWORD PTR _hdc$[ebp], eax
; Line 222
	lea	eax, DWORD PTR _ps$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__EndPaint@8
; Line 223
	jmp	SHORT $LN13@WndProc
$LN2@WndProc:
; Line 225
	push	0
	call	DWORD PTR __imp__PostQuitMessage@4
; Line 226
	jmp	SHORT $LN13@WndProc
$LN1@WndProc:
; Line 228
	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__DefWindowProcW@16
	jmp	SHORT $LN15@WndProc
$LN13@WndProc:
; Line 230
	xor	eax, eax
$LN15@WndProc:
; Line 231
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?WndProc@@YGJPAUHWND__@@IIJ@Z ENDP			; WndProc
_TEXT	ENDS
PUBLIC	?MyRegisterClass@@YAGPAUHINSTANCE__@@@Z		; MyRegisterClass
; Function compile flags: /Odtp
_TEXT	SEGMENT
_wcex$ = -48						; size = 48
_hInstance$ = 8						; size = 4
?MyRegisterClass@@YAGPAUHINSTANCE__@@@Z PROC		; MyRegisterClass
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
; Line 78
	mov	DWORD PTR _wcex$[ebp], 48		; 00000030H
; Line 80
	mov	DWORD PTR _wcex$[ebp+4], 3
; Line 81
	mov	DWORD PTR _wcex$[ebp+8], OFFSET ?WndProc@@YGJPAUHWND__@@IIJ@Z ; WndProc
; Line 82
	mov	DWORD PTR _wcex$[ebp+12], 0
; Line 83
	mov	DWORD PTR _wcex$[ebp+16], 0
; Line 84
	mov	eax, DWORD PTR _hInstance$[ebp]
	mov	DWORD PTR _wcex$[ebp+20], eax
; Line 85
	push	107					; 0000006bH
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	ecx
	call	DWORD PTR __imp__LoadIconW@8
	mov	DWORD PTR _wcex$[ebp+24], eax
; Line 86
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadCursorW@8
	mov	DWORD PTR _wcex$[ebp+28], eax
; Line 87
	mov	DWORD PTR _wcex$[ebp+32], 6
; Line 88
	mov	DWORD PTR _wcex$[ebp+36], 109		; 0000006dH
; Line 89
	mov	DWORD PTR _wcex$[ebp+40], OFFSET ?szWindowClass@@3PA_WA ; szWindowClass
; Line 90
	push	108					; 0000006cH
	mov	edx, DWORD PTR _wcex$[ebp+20]
	push	edx
	call	DWORD PTR __imp__LoadIconW@8
	mov	DWORD PTR _wcex$[ebp+44], eax
; Line 92
	lea	eax, DWORD PTR _wcex$[ebp]
	push	eax
	call	DWORD PTR __imp__RegisterClassExW@4
; Line 93
	mov	esp, ebp
	pop	ebp
	ret	0
?MyRegisterClass@@YAGPAUHINSTANCE__@@@Z ENDP		; MyRegisterClass
_TEXT	ENDS
PUBLIC	_wWinMain@16
; Function compile flags: /Odtp
_TEXT	SEGMENT
_msg$ = -32						; size = 28
_hAccelTable$ = -4					; size = 4
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_wWinMain@16 PROC
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 34
	push	100					; 00000064H
	push	OFFSET ?szTitle@@3PA_WA			; szTitle
	push	103					; 00000067H
	mov	eax, DWORD PTR _hInstance$[ebp]
	push	eax
	call	DWORD PTR __imp__LoadStringW@16
; Line 35
	push	100					; 00000064H
	push	OFFSET ?szWindowClass@@3PA_WA		; szWindowClass
	push	109					; 0000006dH
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	ecx
	call	DWORD PTR __imp__LoadStringW@16
; Line 36
	mov	edx, DWORD PTR _hInstance$[ebp]
	push	edx
	call	?MyRegisterClass@@YAGPAUHINSTANCE__@@@Z	; MyRegisterClass
	add	esp, 4
; Line 39
	mov	eax, DWORD PTR _nCmdShow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	ecx
	call	?InitInstance@@YAHPAUHINSTANCE__@@H@Z	; InitInstance
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@wWinMain
; Line 41
	xor	eax, eax
	jmp	SHORT $LN5@wWinMain
$LN4@wWinMain:
; Line 44
	push	109					; 0000006dH
	mov	edx, DWORD PTR _hInstance$[ebp]
	push	edx
	call	DWORD PTR __imp__LoadAcceleratorsW@8
	mov	DWORD PTR _hAccelTable$[ebp], eax
$LN3@wWinMain:
; Line 47
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__GetMessageW@16
	test	eax, eax
	je	SHORT $LN2@wWinMain
; Line 49
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hAccelTable$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__TranslateAcceleratorW@12
	test	eax, eax
	jne	SHORT $LN1@wWinMain
; Line 51
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	DWORD PTR __imp__TranslateMessage@4
; Line 52
	lea	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	DWORD PTR __imp__DispatchMessageW@4
$LN1@wWinMain:
; Line 54
	jmp	SHORT $LN3@wWinMain
$LN2@wWinMain:
; Line 56
	mov	eax, DWORD PTR _msg$[ebp+8]
$LN5@wWinMain:
; Line 57
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_wWinMain@16 ENDP
_TEXT	ENDS
END
